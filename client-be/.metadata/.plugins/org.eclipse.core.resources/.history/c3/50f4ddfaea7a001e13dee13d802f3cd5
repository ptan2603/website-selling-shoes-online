package com.poly.bangiaybe.serviceimpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.poly.bangiaybe.constant.AccountConst;
import com.poly.bangiaybe.dto.Req.ReqRegisterAccountDto;
import com.poly.bangiaybe.dto.Resp.RespAccountDto;
import com.poly.bangiaybe.entity.Account;
import com.poly.bangiaybe.entity.AccountDetail;
import com.poly.bangiaybe.entity.Role;
import com.poly.bangiaybe.exception.AppException;
import com.poly.bangiaybe.repository.AccountRepo;
import com.poly.bangiaybe.service.AccountDetailService;
import com.poly.bangiaybe.service.AccountService;
import com.poly.bangiaybe.service.RoleService;
import com.poly.bangiaybe.util.ConvertUtil;

import javax.transaction.Transactional;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class AccountSeImpl implements AccountService {
    @Autowired
    AccountRepo accountRepo;
    
    @Autowired
    AccountDetailService accountDetailService;
    
    @Autowired
    RoleService roleService;
    
    @Autowired
    PasswordEncoder passwordEncoder;

    
    @Override
    public Account findById(Long id) {
        Optional<Account> optionalAccount = accountRepo.findById(id);
        if(!optionalAccount.isPresent()){
            throw new AppException(AccountConst.ACCOUNT_MSG_ERROR_NOT_EXIST);
        }
        return optionalAccount.get();
    }
    
	@Override
    public List<RespAccountDto> findAllSecond(Pageable pageable) {
        return this.accountRepo.findAllSecond(pageable);
    }

    @Override
    public RespAccountDto findByIdSecond(Long id) {
        return this.accountRepo.findByIdSecond(id);
    }

    @Override
    public RespAccountDto findByUsername(String username) {
        return this.accountRepo.findByUsername(username);
    }
    
    @Transactional
    @Modifying
    @Override
    public RespAccountDto register(ReqRegisterAccountDto reqRegisterAccountDto) {
        if (this.accountRepo.findAccountByUsername(reqRegisterAccountDto.getUsername()) != null) {
            throw new AppException("Username đã tồn tại");
        }
        if (this.accountDetailService.findAccountDetailByEmail(reqRegisterAccountDto.getEmail()) != null){
            throw new AppException("Email đã tồn tại");
        }
        Account account = ConvertUtil.ReqCreateAccountDtoToAccount(reqRegisterAccountDto);
        account.setPassword(passwordEncoder.encode(account.getPassword()));
        Role role = roleService.findById(3L);
        account.setRole(role);
        account = this.accountRepo.save(account);
        AccountDetail accountDetail = ConvertUtil.ReqAccountDtoToAccountDetail(reqRegisterAccountDto);
        accountDetail.setAccount(account);
        accountDetail = this.accountDetailService.save(accountDetail);
        RespAccountDto respAccountDto = ConvertUtil.accountToRespAccountDto(account, accountDetail);
        return respAccountDto;
    }
    
    @Override
    public Integer countAccount() {
        return accountRepo.findAll().size();
    }
    
    @Override
    public Account findAccountByUsername(String username) {
        return this.accountRepo.findAccountByUsername(username);
    }
    
    @Override
    public List<Object[]> findAccountByIsActiveOrInactive(Boolean isActive, Pageable pageable) {
        return this.accountRepo.findAccountByIsActiveOrInactive(isActive, pageable);
    }
    
  
}
